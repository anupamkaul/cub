 scope1 for our type and var defs GOING IN TYPE (FRST, FALSE) ;)

<BISON> EVALD a type_decl:  type foo =  int
GOING IN TYPE FOR symbol foo ;)

<BISON> EVALD a type_decl:  type foo1 =  int
GOING IN TYPE FOR symbol foo1 ;)

<BISON> EVALD a type_decl:  type bar =  array  of foo
GOING IN TYPE FOR symbol bar ;)
3. EXPLITERAL (pure num): 512 (9, 14)
Discovered an EXPLITEral: 512

<BISON> EVALD a var_decl:  var N := 512
TEST: N
TEST (pos line IS WRONG): 11
1. SIMPLE VAR (l:11, c:16): N
3. EXPLITERAL (lvalue): N
Discovered an EXPLITEral: N
3. EXPLITERAL (pure num): 0 (11, 27)
Discovered an EXPLITEral: 0
Discovered an ARRAY DEFN: [ N ] bar  of 0

<BISON> EVALD a var_decl:  var a := [ N ] bar  of 0
1. SIMPLE VAR (l:12, c:16): N
3. EXPLITERAL (lvalue): N
Discovered an EXPLITEral: N
3. EXPLITERAL (pure num): 1 (12, 27)
 execution of the scope Discovered an EXPLITEral: 1
Discovered an ARRAY DEFN: [ N ] bar  of 1

<BISON> EVALD a var_decl:  var b := [ N ] bar  of 1
VARLIST (LOOKS FIRST), ADDED TO NULL (b)
Expression associated with this var is as follows:
PRNSTAT-EXP: ARRAY EXP (l:12, c:14) of type = "bar"

ArraySize expression is as follows:
PRNSTAT-EXP: VAR EXP (l:12, c:16): (details below)
PRNSTAT-VAR: SIMPLE VAR (l:12, c:16): N

ArrayInit expression is as follows:
PRNSTAT-EXP: INT EXP : 1
PRNSTAT-EXP: INT EXP (l:12, c:27)

END-OF-EXP

VARLIST - ALSO ADDED (a)
Expression associated with this var is as follows:
PRNSTAT-EXP: ARRAY EXP (l:11, c:14) of type = "bar"

ArraySize expression is as follows:
PRNSTAT-EXP: VAR EXP (l:11, c:16): (details below)
PRNSTAT-VAR: SIMPLE VAR (l:11, c:16): N

ArrayInit expression is as follows:
PRNSTAT-EXP: INT EXP : 0
PRNSTAT-EXP: INT EXP (l:11, c:27)

END-OF-EXP

VARLIST - ALSO ADDED (N)
Expression associated with this var is as follows:
PRNSTAT-EXP: INT EXP : 512
PRNSTAT-EXP: INT EXP (l:9, c:14)

END-OF-EXP

MAIN TYPE DECL CONSTRUCT CONTD


NEW TYPE LIST DETAILS
1 TYPE HEADER
 TYPE LHS = foo
 TYPE RHS: ID TYPE
 id:  int
2 TYPE HEADER
 TYPE LHS = foo1
 TYPE RHS: ID TYPE
 id:  int
3 TYPE HEADER
 TYPE LHS = bar
 TYPE RHS: ARRAY TYPE
 array: foo
[END TYPE LIST]


