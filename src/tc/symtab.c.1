#include<stdio.h>
#include<string.h>
#include "symtab.h"

/** symtab.c - This module contains the implementation
 * of the symbol table implemented for the tiger
 * compiler.
 */

/* Symbol table - The table is a  list of table-entries. 
 * Table is dyanamically allocated consecutive mem chunks
 * for table expansion in case of too many collisions. 
 *
 * Each table entry is defined in symtab.h. It stores
 * the symbol and its binding. 
 *
 * The symbol structure (symbol.h) is converted to an index 
 * using its address. This index corresponds to an element
 * of the symbol table (symtab.h)
 *
 * This file contains the realization of the symbol table
 * and its manipulation functions for realizing symbol
 * insertions/lookup and scope/binding issues.
 *
 */

#define TableEntry(t,s)      Entry((t), sym2index((s)))

#define BeginScope           stackpush_internal(Symbol("__START_MARK"))
#define EndScope(t)          TAB_pop((t))

/* We keep a global stack in ram, to remember the recent symbols
 * that were inserted per scope. This helps in the destructive
 * update of the table per scope.
 *
 * Note - This stack must be deleted once its usage is over,
 * so include its initialization in a function.
 */

sym_stack_internal gbsym_stack=NULL;

/* 
 * Function declarations (internal)
 */

INDEX sym2index(symbol sym);
tableEntry Entry(table t, int index);

void stackpush_internal(symbol sym);
symbol stackpop_internal();

/* 
 * Function definitions
 */

/* Function sym2index converts the address
 * of the struct 'sym' (symbol.h/.c) to an
 * index which lies within our symbol table
 * (symtab.h, table)
 */

INDEX sym2index(symbol sym)
{
  printf("sym2index = %d\n", (int)((int)sym % MAX_SYMBOLS));
  return (int)((int)sym % MAX_SYMBOLS);
}

/* Function Entry returns an element from
 * the symbol table, based on its index.
 *
 * The implementation treats the table
 * like an array of contiguously allocated
 * elements.
 */

tableEntry Entry(table t, int index)
{
	if((index==0) || (index>MAX_SYMBOLS)) exit(1);

	/* test address range */
        printf("(Entry) ADDRESS OF INDEX %d = 0x%x (of table 0x%x)\n", index, (t + (index-1)) , t);
	
	//return (t + (index-1))->entry;
	return (tableEntry)(t + (index-1));
}

/* Enter a symbol and binding in a table */
void TAB_enter(table t, symbol s, bvalue b)
{
	/* create entry */
	tableEntry e = (tableEntry)malloc(sizeof(struct tableEntry_));
	e->s = s;
	e->b = b;
	printf("Name, inserted = %s\n", e->s->name);

	/* link with table */
	tableEntry d = TableEntry(t, s);

	printf("In TAB_enter, 0x%x exchanged with 0x%x\n", e, d);

	/* warning: nullify it if it is not a collision */
	//d = NULL;

	e->next = d;
	d = e; /* the bug is prob in this line */

	/* update internal stack */
	stackpush_internal(s);
}

/* Create a new table */
table TAB_empty()
{
	/* allocate runtime array */
	/* is it contiguous? */

	table t = (table)malloc(MAX_SYMBOLS * sizeof(struct table_));
	if(t == NULL)
	{
	 exit(1);
	}

	t->L_Add = t;
	t->H_Add = t + (MAX_SYMBOLS * sizeof(struct table_));

	printf("TABLE AREA ALLOCATED FROM LOW = 0x%x (0x%x) TO HIGH = 0x%x\n", t->L_Add, t, t->H_Add);
	printf("No. of bytes allocated = %d\n", MAX_SYMBOLS * sizeof(struct table_));

	/* nullify all pointers before returning (shd be managed by client s/w) */
	return t;

	/* in order to test for contiguousness, let every
	 * table obj also contain 2 fields H_Add and L_Add,
	 * which can be filled up at this point, and should
	 * be checked at TableEntry, when linking a new
	 * entry with the table.
	 */
}

/* lookup a binding for a symbol in a table */
bvalue TAB_lookup(table t, symbol s)
{
	return(TableEntry(t, s)->b);
}

/* remove the symbol's last binding from this table */
void TAB_desupdate(table t, symbol s)
{
	tableEntry d = TableEntry(t, s);
        d = d->next;
}

/* remove the recent bindings in this table */
void TAB_pop(table t)
{
	symbol s, start=Symbol("__START_MARK");
	while((s = stackpop_internal()) != start)
	{
		TAB_desupdate(t, s);
	}
}

/* functions for the movement of the internal symbol stack */
void stackpush_internal(symbol s)
{
	sym_stack_internal n = (sym_stack_internal)malloc(sizeof(struct sym_stack_internal_));
        n->s = s;
	n->next = gbsym_stack;
	gbsym_stack = n;
}

symbol stackpop_internal()
{
	symbol s;
	if(gbsym_stack == NULL) 
	{	
		DBG("!!internal stack empty!!\n");
		exit(1);
	}
	s = gbsym_stack->s;
	gbsym_stack = gbsym_stack->next;
	return s;
}

main()
{

	 /* tests from the main of symbol.c: */

	symbol a;
	NULLIFY(internal_array, 0, MAXINDEX-1);

	a = Symbol("anupam");
	DBG("Symbol is 0x%x for %s\n", a, Name(a));

	a = Symbol("anupam1");
	DBG("Symbol is 0x%x for %s\n", a, Name(a));

	a = Symbol("anupam");
	DBG("Symbol is 0x%x\t%s\n", a, Name(a));

	a = Symbol("anupam2");
	DBG("Symbols is 0x%x\t%s\n", a, Name(a));

	a = Symbol("anupam");
	DBG("Symbol is 0x%x\t%s\n", a, Name(a));

	a = Symbol("anupam3");
	DBG("Symbol is 0x%x\t%s\n", a, Name(a));

	a = Symbol("anupam");
	DBG("Symbol is 0x%x\t%s\n", a, Name(a));

	 /* tests from the main of symtab.c */

	 table test1 = TAB_empty();
	 printf("ADDRESS RANGE OF test1 = 0x%x to 0x%x\n", test1->L_Add, test1->H_Add);

	 TAB_enter(test1, Symbol("TastyPizza"), (void*)0);
	 TAB_enter(test1, Symbol("TatsyPinza"), (void*)0);
	 TAB_enter(test1, Symbol("TastiPimza"), (void*)0);
	 TAB_enter(test1, Symbol("TsatyPidza"), (void*)0);
	 TAB_enter(test1, Symbol("TastePalza"), (void*)0);
	 TAB_enter(test1, Symbol("TartyPurza"), (void*)0);
	 TAB_enter(test1, Symbol("TratyPleza"), (void*)0);
	 TAB_enter(test1, Symbol("TaslyPiaza"), (void*)0);
	 TAB_enter(test1, Symbol("TeatyPeaza"), (void*)0);
	 TAB_enter(test1, Symbol("TrotyPraza"), (void*)0);

	 printf("starting test1\n");
	 printf("Inserted Symbol = 0x%x\n", TableEntry(test1, Symbol("TastyPizza"))->s );

	 return(1);

}
