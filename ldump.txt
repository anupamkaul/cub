let^KWD(1,1)^  

type^KWD(3,1)^  foo^IDENT(3,6)^  =^EQ_OP(3,10)^  bar^IDENT(3,12)^ 
type^KWD(4,1)^  meguil^IDENT(4,6)^  =^EQ_OP(4,13)^  baroda^IDENT(4,15)^ 
type^KWD(5,1)^  lashid^IDENT(5,6)^  =^EQ_OP(5,13)^  tamquan^IDENT(5,15)^ 

type^KWD(7,1)^  b^IDENT(7,6)^ =^EQ_OP(7,7)^ c^IDENT(7,8)^ 
type^KWD(8,1)^  c^IDENT(8,6)^  =^EQ_OP(8,8)^  b^IDENT(8,10)^  

type^KWD(10,1)^  testarray^IDENT(10,6)^  =^EQ_OP(10,16)^  array^KWD(10,17)^  of^KWD(10,23)^  hit^IDENT(10,27)^   

var^KWD(12,1)^  try_hit^IDENT(12,5)^  :=^ASN_OP(12,13)^  2^PURE_NUM(12,16)^  +^ADD_OP(12,18)^  elf^IDENT(12,20)^ 
<^CSt^  ^CEnd^>
var^KWD(14,1)^  corona^IDENT(14,5)^  :=^ASN_OP(14,12)^  abcd^IDENT(14,15)^  *^MULT_OP(14,20)^  zyngert^IDENT(14,22)^  *^MULT_OP(14,30)^  (^LPARAN(14,32)^ now^IDENT(14,33)^  +^ADD_OP(14,37)^  then1^IDENT(14,39)^  -^MINUS_OP(14,45)^  current^IDENT(14,47)^ )^rparan^ )^RPARAN(14,54)^ 


type^KWD(17,1)^  intarray^IDENT(17,6)^  =^EQ_OP(17,15)^  array^KWD(17,16)^  of^KWD(17,22)^  int^KWD(17,25)^   
type^KWD(18,1)^  strarray^IDENT(18,6)^  =^EQ_OP(18,15)^  array^KWD(18,16)^  of^KWD(18,22)^  string^KWD(18,25)^   

type^KWD(20,1)^  rectype^IDENT(20,6)^  =^EQ_OP(20,14)^  {^LBRACE(20,16)^ hd^IDENT(20,17)^ :^COLON(20,19)^  foo^IDENT(20,21)^ ,^COMMA(20,24)^  t1^IDENT(20,26)^ :^COLON(20,28)^  intlist^IDENT(20,30)^ ,^COMMA(20,37)^  t2^IDENT(20,39)^ :^COLON(20,41)^  stringlist^IDENT(20,43)^ ,^COMMA(20,53)^  t3^IDENT(20,55)^ :^COLON(20,57)^  string^KWD(20,58)^  }^RBRACE(20,66)^ 

type^KWD(22,1)^  rectype2^IDENT(22,6)^  =^EQ_OP(22,15)^  {^LBRACE(22,17)^ 
hd^IDENT(23,1)^ :^COLON(23,3)^  foo2^IDENT(23,5)^ ,^COMMA(23,9)^ 
t1^IDENT(24,1)^ :^COLON(24,3)^  intlist2^IDENT(24,5)^ ,^COMMA(24,13)^ 
t2^IDENT(25,1)^ :^COLON(25,3)^  stringlist2^IDENT(25,5)^ 
}^RBRACE(26,1)^ 


function^KWD(29,1)^  type1^IDENT(29,10)^ (^LPARAN(29,15)^ )^rparan^ )^RPARAN(29,16)^  =^EQ_OP(29,18)^  (^LPARAN(29,20)^  if^KWD(29,21)^  (^LPARAN(29,25)^ mix^IDENT(29,26)^  =^EQ_OP(29,30)^  fox^IDENT(29,32)^ )^rparan^ )^RPARAN(29,35)^  then^KWD(29,36)^  (^LPARAN(29,42)^ 
                    a^IDENT(30,21)^  :=^ASN_OP(30,23)^  b^IDENT(30,26)^ ;^SEMICOLON(30,27)^ 
                    b^IDENT(31,21)^  :=^ASN_OP(31,23)^  b^IDENT(31,26)^  +^ADD_OP(31,28)^  1^PURE_NUM(31,30)^  ;^SEMICOLON(31,32)^ 
                    c^IDENT(32,21)^  :=^ASN_OP(32,23)^  b^IDENT(32,26)^ ;^SEMICOLON(32,27)^ 
                    d^IDENT(33,21)^  :=^ASN_OP(33,23)^  fyou^IDENT(33,26)^ (^LPARAN(33,30)^ )^rparan^ )^RPARAN(33,31)^  ;^SEMICOLON(33,33)^ 
                    e^IDENT(34,21)^  :=^ASN_OP(34,23)^  d^IDENT(34,26)^ 
                         )^rparan^ )^RPARAN(35,26)^ )^rparan^ )^RPARAN(35,27)^ 

function^KWD(37,1)^  treeLeaveas2^IDENT(37,10)^ (^LPARAN(37,22)^ t^IDENT(37,23)^  :^COLON(37,25)^  tree^IDENT(37,27)^ )^rparan^ )^RPARAN(37,31)^  =^EQ_OP(37,33)^  
(^LPARAN(38,1)^ 
  let^KWD(39,2)^   
  var^KWD(40,2)^  ihit^IDENT(40,7)^  :^COLON(40,12)^  int^KWD(40,13)^  :=^ASN_OP(40,18)^  (^LPARAN(40,21)^  67^PURE_NUM(40,23)^  +^ADD_OP(40,26)^  intarray^IDENT(40,28)^ [^sqLbrace(40,36)^ 5^PURE_NUM(40,37)^ ]^sqRbrace(40,38)^  )^rparan^ )^RPARAN(40,40)^  
  var^KWD(41,2)^  more_hit^IDENT(41,7)^  :=^ASN_OP(41,16)^  2^PURE_NUM(41,19)^  
  var^KWD(42,2)^  tmp^IDENT(42,7)^  :=^ASN_OP(42,11)^  try_mix^IDENT(42,14)^ 
  var^KWD(43,2)^  arr_hit^IDENT(43,7)^  :=^ASN_OP(43,15)^  [^sqLbrace(43,18)^  N^IDENT(43,20)^  +^ADD_OP(43,22)^  2^PURE_NUM(43,24)^  ]^sqRbrace(43,26)^  intArray^IDENT(43,28)^  of^KWD(43,36)^  (^LPARAN(43,40)^  tempworkers^IDENT(43,42)^  +^ADD_OP(43,54)^  backup_workers^IDENT(43,56)^  )^rparan^ )^RPARAN(43,71)^  
  var^KWD(44,2)^  more_hit^IDENT(44,7)^  :=^ASN_OP(44,16)^  3^PURE_NUM(44,19)^  
  var^KWD(45,2)^  i2hit^IDENT(45,7)^  :=^ASN_OP(45,13)^  (^LPARAN(45,16)^  67^PURE_NUM(45,18)^  +^ADD_OP(45,21)^  intarray^IDENT(45,23)^ [^sqLbrace(45,31)^ 5^PURE_NUM(45,32)^ ]^sqRbrace(45,33)^  )^rparan^ )^RPARAN(45,35)^  
  in^KWD(46,2)^  (^LPARAN(46,6)^ 
  t^IDENT(47,3)^  :=^ASN_OP(47,5)^  treeLeaves^IDENT(47,8)^ (^LPARAN(47,18)^ )^rparan^ )^RPARAN(47,19)^ ;^SEMICOLON(47,20)^ 
  t^IDENT(48,3)^  :=^ASN_OP(48,5)^  rectype^IDENT(48,8)^ .^PERIOD(48,15)^ ele1^IDENT(48,16)^ .^PERIOD(48,20)^ arry1^IDENT(48,21)^ [^sqLbrace(48,26)^  ele2^IDENT(48,28)^ .^PERIOD(48,32)^ this^IDENT(48,33)^  +^ADD_OP(48,38)^  ele3^IDENT(48,40)^ .^PERIOD(48,44)^ that^IDENT(48,45)^  ]^sqRbrace(48,50)^ ;^SEMICOLON(48,51)^ 
  t1^IDENT(49,3)^  :=^ASN_OP(49,6)^  rectypo1^IDENT(49,9)^ .^PERIOD(49,17)^ ele1^IDENT(49,18)^ .^PERIOD(49,22)^ arry1^IDENT(49,23)^ [^sqLbrace(49,28)^  ele2^IDENT(49,30)^ .^PERIOD(49,34)^ this^IDENT(49,35)^  +^ADD_OP(49,40)^  ele3^IDENT(49,42)^ .^PERIOD(49,46)^ that^IDENT(49,47)^  ]^sqRbrace(49,52)^ .^PERIOD(49,53)^ ele5^IDENT(49,54)^ .^PERIOD(49,58)^ ele6^IDENT(49,59)^ ;^SEMICOLON(49,63)^ 
  t1^IDENT(50,3)^  :=^ASN_OP(50,6)^  rectypo2^IDENT(50,9)^ .^PERIOD(50,17)^ ele1^IDENT(50,18)^ [^sqLbrace(50,22)^  1^PURE_NUM(50,24)^  +^ADD_OP(50,26)^  3^PURE_NUM(50,28)^  ]^sqRbrace(50,30)^ .^PERIOD(50,31)^ arry1^IDENT(50,32)^ [^sqLbrace(50,37)^  ele2^IDENT(50,39)^ .^PERIOD(50,43)^ this^IDENT(50,44)^  +^ADD_OP(50,49)^  ele3^IDENT(50,51)^ .^PERIOD(50,55)^ that^IDENT(50,56)^  ]^sqRbrace(50,61)^ .^PERIOD(50,62)^ ele5^IDENT(50,63)^ .^PERIOD(50,67)^ ele6^IDENT(50,68)^ ;^SEMICOLON(50,72)^ 
  t2^IDENT(51,3)^  :=^ASN_OP(51,6)^  rectypo3^IDENT(51,9)^ .^PERIOD(51,17)^ ele1^IDENT(51,18)^ [^sqLbrace(51,22)^  1^PURE_NUM(51,24)^  +^ADD_OP(51,26)^  3^PURE_NUM(51,28)^  ]^sqRbrace(51,30)^ [^sqLbrace(51,31)^  ele2^IDENT(51,33)^ .^PERIOD(51,37)^ this^IDENT(51,38)^  +^ADD_OP(51,43)^  ele3^IDENT(51,45)^ .^PERIOD(51,49)^ that^IDENT(51,50)^  ]^sqRbrace(51,55)^ .^PERIOD(51,56)^ ele5^IDENT(51,57)^ .^PERIOD(51,61)^ ele6^IDENT(51,62)^ ;^SEMICOLON(51,66)^ 
  more_hit^IDENT(52,3)^  :=^ASN_OP(52,12)^  1^PURE_NUM(52,15)^ ;^SEMICOLON(52,16)^ 
  double_hit^IDENT(53,3)^  :=^ASN_OP(53,14)^  1^PURE_NUM(53,17)^  +^ADD_OP(53,19)^  2^PURE_NUM(53,21)^  +^ADD_OP(53,23)^  3^PURE_NUM(53,25)^  +^ADD_OP(53,27)^  4^PURE_NUM(53,29)^  /^DIV_OP(53,31)^  elope^IDENT(53,33)^  *^MULT_OP(53,39)^  with^IDENT(53,41)^  -^MINUS_OP(53,46)^  me^IDENT(53,48)^ ;^SEMICOLON(53,50)^ 

  if^KWD(55,2)^  (^LPARAN(55,6)^  a^IDENT(55,8)^  =^EQ_OP(55,10)^  b^IDENT(55,12)^  )^rparan^ )^RPARAN(55,14)^  then^KWD(55,15)^  (^LPARAN(55,21)^ c^IDENT(55,22)^  :=^ASN_OP(55,24)^  d^IDENT(55,27)^ )^rparan^ )^RPARAN(55,28)^  ;^SEMICOLON(55,30)^ 

  list^IDENT(57,3)^  {^LBRACE(57,8)^ first^IDENT(57,9)^  =^EQ_OP(57,15)^  a^IDENT(57,17)^ .^PERIOD(57,18)^ first^IDENT(57,19)^ ,^COMMA(57,24)^  rest^IDENT(57,26)^  =^EQ_OP(57,31)^  merge^IDENT(57,33)^ (^LPARAN(57,38)^ a^IDENT(57,39)^ .^PERIOD(57,40)^ rest^IDENT(57,41)^ ,^COMMA(57,45)^  b^IDENT(57,47)^ )^rparan^ )^RPARAN(57,48)^ }^RBRACE(57,49)^ ;^SEMICOLON(57,50)^ 

  if^KWD(59,2)^  (^LPARAN(59,6)^  a^IDENT(59,8)^  =^EQ_OP(59,10)^  b^IDENT(59,12)^  )^rparan^ )^RPARAN(59,14)^  then^KWD(59,15)^  (^LPARAN(59,21)^ c1^IDENT(59,22)^  :=^ASN_OP(59,25)^  d^IDENT(59,28)^ ;^SEMICOLON(59,29)^ 
                     c2^IDENT(60,22)^  :=^ASN_OP(60,25)^  d1^IDENT(60,28)^ ;^SEMICOLON(60,30)^ 
                     c3^IDENT(61,22)^  :=^ASN_OP(61,25)^  d2^IDENT(61,28)^ ;^SEMICOLON(61,30)^ 
                     f^IDENT(62,22)^ (^LPARAN(62,23)^ )^rparan^ )^RPARAN(62,24)^ 
                    )^rparan^ )^RPARAN(63,21)^  ;^SEMICOLON(63,23)^ 

  while^KWD(65,2)^  (^LPARAN(65,9)^  a^IDENT(65,11)^  +^ADD_OP(65,13)^  b^IDENT(65,15)^  <^LE_OP(65,17)^  50^PURE_NUM(65,19)^  )^rparan^ )^RPARAN(65,22)^ 
  do^KWD(66,2)^  (^LPARAN(66,6)^ 
   a^IDENT(67,4)^  :=^ASN_OP(67,6)^  a^IDENT(67,9)^  +^ADD_OP(67,11)^  b^IDENT(67,13)^ ;^SEMICOLON(67,14)^ 
   b^IDENT(68,4)^  :=^ASN_OP(68,6)^  b^IDENT(68,9)^  -^MINUS_OP(68,11)^  a^IDENT(68,13)^ 
  )^rparan^ )^RPARAN(69,3)^ ;^SEMICOLON(69,4)^ 

  if^KWD(71,2)^  (^LPARAN(71,6)^ b^IDENT(71,7)^  =^EQ_OP(71,9)^  c^IDENT(71,11)^  )^rparan^ )^RPARAN(71,13)^  then^KWD(71,14)^  (^LPARAN(71,20)^ 
  mme^IDENT(72,3)^  :=^ASN_OP(72,7)^  you^IDENT(72,10)^ 
  )^rparan^ )^RPARAN(73,3)^ ;^SEMICOLON(73,4)^ 

  if^KWD(75,2)^  (^LPARAN(75,6)^ b^IDENT(75,7)^  =^EQ_OP(75,9)^  c^IDENT(75,11)^  )^rparan^ )^RPARAN(75,13)^  then^KWD(75,14)^  
  (^LPARAN(76,3)^ 
  mme^IDENT(77,3)^  :=^ASN_OP(77,7)^  you^IDENT(77,10)^ 
  )^rparan^ )^RPARAN(78,3)^ ;^SEMICOLON(78,4)^ 

  if^KWD(80,2)^  (^LPARAN(80,6)^ b^IDENT(80,7)^  =^EQ_OP(80,9)^  c^IDENT(80,11)^  )^rparan^ )^RPARAN(80,13)^  then^KWD(80,14)^  
  (^LPARAN(81,3)^ 
        if^KWD(82,8)^  (^LPARAN(82,12)^  a^IDENT(82,14)^  =^EQ_OP(82,16)^  b^IDENT(82,18)^  )^rparan^ )^RPARAN(82,20)^  then^KWD(82,21)^  (^LPARAN(82,27)^ c^IDENT(82,28)^  :=^ASN_OP(82,30)^  d^IDENT(82,33)^ )^rparan^ )^RPARAN(82,34)^ ;^SEMICOLON(82,35)^  
  	mme^IDENT(83,4)^  :=^ASN_OP(83,8)^  you^IDENT(83,11)^ 
  )^rparan^ )^RPARAN(84,3)^ 
  )^rparan^ )^RPARAN(85,3)^  end^KWD(85,4)^   ;^SEMICOLON(85,10)^  

  let^KWD(87,2)^   
  var^KWD(88,2)^  i3hit^IDENT(88,7)^  :=^ASN_OP(88,13)^  i2hit^IDENT(88,16)^  in^KWD(88,21)^   
  (^LPARAN(89,3)^  i3hit^IDENT(89,5)^  :=^ASN_OP(89,11)^  more_hit^IDENT(89,14)^  +^ADD_OP(89,23)^  i2hit^IDENT(89,25)^  )^rparan^ )^RPARAN(89,31)^   end^KWD(89,33)^   

)^rparan^ )^RPARAN(91,1)^ 

function^KWD(93,1)^  test1^IDENT(93,10)^ (^LPARAN(93,15)^ )^rparan^ )^RPARAN(93,16)^  =^EQ_OP(93,18)^  (^LPARAN(93,20)^ 
        if^KWD(94,8)^  (^LPARAN(94,12)^  a^IDENT(94,14)^  =^EQ_OP(94,16)^  b^IDENT(94,18)^  )^rparan^ )^RPARAN(94,20)^  then^KWD(94,21)^  (^LPARAN(94,27)^ c^IDENT(94,28)^  :=^ASN_OP(94,30)^  d^IDENT(94,33)^ )^rparan^ )^RPARAN(94,34)^ ;^SEMICOLON(94,35)^ 
        mme^IDENT(95,9)^  :=^ASN_OP(95,13)^  you^IDENT(95,16)^ ;^SEMICOLON(95,19)^ 

        while^KWD(97,8)^  (^LPARAN(97,15)^ a^IDENT(97,16)^  >^GR_OP(97,18)^  b^IDENT(97,20)^ )^rparan^ )^RPARAN(97,21)^  do^KWD(97,22)^  (^LPARAN(97,26)^ 
        if^KWD(98,8)^  (^LPARAN(98,12)^  a^IDENT(98,14)^  =^EQ_OP(98,16)^  c^IDENT(98,18)^  )^rparan^ )^RPARAN(98,20)^  then^KWD(98,21)^  (^LPARAN(98,27)^  break^KWD(98,28)^  )^rparan^ )^RPARAN(98,35)^ ;^SEMICOLON(98,36)^ 
        a^IDENT(99,9)^  :=^ASN_OP(99,11)^  a^IDENT(99,14)^  -^MINUS_OP(99,16)^  b^IDENT(99,18)^  ;^SEMICOLON(99,20)^ 
        f^IDENT(100,9)^ (^LPARAN(100,10)^ a^IDENT(100,11)^ )^rparan^ )^RPARAN(100,12)^ ;^SEMICOLON(100,13)^ 
        b^IDENT(101,9)^  :=^ASN_OP(101,11)^  b^IDENT(101,14)^  +^ADD_OP(101,16)^  f^IDENT(101,18)^ (^LPARAN(101,19)^ a^IDENT(101,20)^ )^rparan^ )^RPARAN(101,21)^ 
        )^rparan^ )^RPARAN(102,9)^ ;^SEMICOLON(102,10)^ 

        let^KWD(104,8)^   
        var^KWD(105,8)^  artysme^IDENT(105,13)^ :^COLON(105,20)^  fitr^IDENT(105,22)^  :=^ASN_OP(105,27)^  get_tree^IDENT(105,30)^ (^LPARAN(105,38)^  f^IDENT(105,40)^ (^LPARAN(105,41)^ a^IDENT(105,42)^ )^rparan^ )^RPARAN(105,43)^  )^rparan^ )^RPARAN(105,45)^ 
        var^KWD(106,8)^  arborral^IDENT(106,13)^ :^COLON(106,21)^  klad^IDENT(106,23)^  :=^ASN_OP(106,28)^  get_tree^IDENT(106,31)^ (^LPARAN(106,39)^  f^IDENT(106,41)^ (^LPARAN(106,42)^ g^IDENT(106,43)^ (^LPARAN(106,44)^ a^IDENT(106,45)^ )^rparan^ )^RPARAN(106,46)^ )^rparan^ )^RPARAN(106,47)^  )^rparan^ )^RPARAN(106,49)^ 
        var^KWD(107,8)^  brazencult^IDENT(107,13)^  :=^ASN_OP(107,24)^  [^sqLbrace(107,27)^  get_number^IDENT(107,29)^ (^LPARAN(107,39)^  tree_root^IDENT(107,41)^  )^rparan^ )^RPARAN(107,51)^  ]^sqRbrace(107,53)^  treeArray^IDENT(107,55)^  of^KWD(107,64)^  last_value^IDENT(107,68)^ (^LPARAN(107,78)^  tree_root^IDENT(107,80)^  )^rparan^ )^RPARAN(107,90)^ 
        var^KWD(108,8)^  nagobertic^IDENT(108,13)^  :=^ASN_OP(108,24)^  get_sample^IDENT(108,27)^ (^LPARAN(108,37)^ avec_call^IDENT(108,38)^ ,^COMMA(108,47)^  label_data^IDENT(108,49)^ ,^COMMA(108,59)^  ramp_3^IDENT(108,61)^ (^LPARAN(108,67)^ )^rparan^ )^RPARAN(108,68)^  )^rparan^ )^RPARAN(108,70)^  +^ADD_OP(108,72)^  make_algo^IDENT(108,74)^ (^LPARAN(108,83)^  trimester^IDENT(108,85)^ (^LPARAN(108,94)^ me^IDENT(108,95)^ )^rparan^ )^RPARAN(108,97)^ ,^COMMA(108,98)^  1^PURE_NUM(108,100)^  +^ADD_OP(108,102)^  2^PURE_NUM(108,104)^ ,^COMMA(108,105)^  equals^IDENT(108,107)^ (^LPARAN(108,113)^ 3^PURE_NUM(108,114)^ ,^COMMA(108,115)^ 4^PURE_NUM(108,116)^ )^rparan^ )^RPARAN(108,117)^ )^rparan^ )^RPARAN(108,118)^ 

        in^KWD(110,8)^    
        (^LPARAN(111,9)^ 
           for^KWD(112,11)^  abc^IDENT(112,16)^  :=^ASN_OP(112,20)^  3^PURE_NUM(112,23)^  to^KWD(112,24)^  10^PURE_NUM(112,28)^  do^KWD(112,30)^  (^LPARAN(112,34)^ 
           f^IDENT(113,12)^ (^LPARAN(113,13)^ abc^IDENT(113,14)^ )^rparan^ )^RPARAN(113,17)^ ;^SEMICOLON(113,18)^ 
           if^KWD(114,11)^  (^LPARAN(114,15)^  b^IDENT(114,17)^  >^GR_OP(114,19)^  abc^IDENT(114,21)^   )^rparan^ )^RPARAN(114,26)^  then^KWD(114,27)^  (^LPARAN(114,33)^  abc^IDENT(114,35)^  :=^ASN_OP(114,39)^  abc^IDENT(114,42)^  +^ADD_OP(114,46)^  1^PURE_NUM(114,48)^  )^rparan^ )^RPARAN(114,50)^  else^KWD(114,51)^  (^LPARAN(114,57)^ abc^IDENT(114,58)^  :=^ASN_OP(114,62)^  abc^IDENT(114,65)^  -^MINUS_OP(114,69)^  1^PURE_NUM(114,71)^ )^rparan^ )^RPARAN(114,72)^ ;^SEMICOLON(114,73)^  
           print^IDENT(115,12)^ (^LPARAN(115,17)^ abc^IDENT(115,18)^ )^rparan^ )^RPARAN(115,21)^ 
           )^rparan^ )^RPARAN(116,12)^ 
        )^rparan^ )^RPARAN(117,9)^  end^KWD(117,10)^    
)^rparan^ )^RPARAN(118,1)^ 

function^KWD(120,1)^  treeLeaves^IDENT(120,10)^ (^LPARAN(120,20)^ )^rparan^ )^RPARAN(120,21)^  :^COLON(120,23)^  type_int^IDENT(120,25)^  =^EQ_OP(120,34)^  
(^LPARAN(121,1)^ 
  let^KWD(122,2)^  type^KWD(122,6)^  ele1^IDENT(122,12)^  =^EQ_OP(122,17)^  ele2^IDENT(122,19)^ 
  in^KWD(123,2)^  (^LPARAN(123,6)^  tr^IDENT(123,8)^ (^LPARAN(123,10)^ ele1^IDENT(123,11)^ )^rparan^ )^RPARAN(123,15)^  )^rparan^ )^RPARAN(123,17)^ 
  end^KWD(124,2)^  ;^SEMICOLON(124,7)^ 

  t^IDENT(126,3)^  :=^ASN_OP(126,5)^  rectype^IDENT(126,8)^ .^PERIOD(126,15)^ ele1^IDENT(126,16)^ .^PERIOD(126,20)^ arry1^IDENT(126,21)^ [^sqLbrace(126,26)^  ele2^IDENT(126,28)^ .^PERIOD(126,32)^ this^IDENT(126,33)^  ]^sqRbrace(126,38)^ 
)^rparan^ )^RPARAN(127,1)^ 

var^KWD(129,1)^  a^IDENT(129,5)^ :^COLON(129,6)^  treetype^IDENT(129,8)^  :=^ASN_OP(129,17)^  temp_mix^IDENT(129,20)^ (^LPARAN(129,28)^ )^rparan^ )^RPARAN(129,29)^  


function^KWD(132,1)^  nest1^IDENT(132,10)^ (^LPARAN(132,15)^ )^rparan^ )^RPARAN(132,16)^  :^COLON(132,18)^  type_string^IDENT(132,20)^  =^EQ_OP(132,32)^  
(^LPARAN(133,1)^ 
   b^IDENT(134,4)^  :=^ASN_OP(134,6)^  c^IDENT(134,9)^  +^ADD_OP(134,11)^  d^IDENT(134,13)^ ;^SEMICOLON(134,14)^ 
   c^IDENT(135,4)^  :=^ASN_OP(135,6)^  e^IDENT(135,9)^  -^MINUS_OP(135,11)^ f^IDENT(135,12)^ ;^SEMICOLON(135,13)^ 

   let^KWD(137,3)^  
   function^KWD(138,3)^  nest2^IDENT(138,13)^ (^LPARAN(138,18)^ )^rparan^ )^RPARAN(138,19)^  :^COLON(138,21)^  type_string^IDENT(138,23)^  =^EQ_OP(138,35)^  
   (^LPARAN(139,4)^ 
         b^IDENT(140,10)^  :=^ASN_OP(140,12)^  c^IDENT(140,15)^  +^ADD_OP(140,17)^  d^IDENT(140,19)^ ;^SEMICOLON(140,20)^ 
         c^IDENT(141,10)^  :=^ASN_OP(141,12)^  e^IDENT(141,15)^  -^MINUS_OP(141,17)^ f^IDENT(141,18)^ 
   )^rparan^ )^RPARAN(142,4)^ 
   in^KWD(143,3)^  (^LPARAN(143,7)^  
   dummy^IDENT(144,4)^ (^LPARAN(144,9)^ )^rparan^ )^RPARAN(144,10)^  )^rparan^ )^RPARAN(144,12)^ 
   end^KWD(145,3)^  

)^rparan^ )^RPARAN(147,1)^ 

function^KWD(149,1)^  treeLeaves^IDENT(149,10)^ (^LPARAN(149,20)^ t^IDENT(149,21)^  :^COLON(149,23)^  tree^IDENT(149,25)^ )^rparan^ )^RPARAN(149,29)^  :^COLON(149,31)^  type_int^IDENT(149,33)^  =^EQ_OP(149,42)^  
(^LPARAN(150,1)^ 
  t^IDENT(151,3)^  :=^ASN_OP(151,5)^  arry1^IDENT(151,8)^ [^sqLbrace(151,13)^  1^PURE_NUM(151,15)^  +^ADD_OP(151,17)^  rec1^IDENT(151,19)^ .^PERIOD(151,23)^ ele1^IDENT(151,24)^  +^ADD_OP(151,29)^  rec1^IDENT(151,31)^ .^PERIOD(151,35)^ ele1^IDENT(151,36)^ .^PERIOD(151,40)^ ele2^IDENT(151,41)^  &^AND_OP(151,46)^  rec1^IDENT(151,48)^ .^PERIOD(151,52)^ ele1^IDENT(151,53)^ .^PERIOD(151,57)^ ele2^IDENT(151,58)^ .^PERIOD(151,62)^ arry2^IDENT(151,63)^ [^sqLbrace(151,68)^  rec1^IDENT(151,70)^ .^PERIOD(151,74)^ ele1^IDENT(151,75)^  *^MULT_OP(151,80)^  rec2^IDENT(151,82)^ .^PERIOD(151,86)^ ele2^IDENT(151,87)^  ]^sqRbrace(151,92)^  ]^sqRbrace(151,94)^  ;^SEMICOLON(151,96)^ 
  m^IDENT(152,3)^  :=^ASN_OP(152,5)^  you^IDENT(152,8)^ ;^SEMICOLON(152,11)^ 

  let^KWD(154,2)^  type^KWD(154,6)^  foo^IDENT(154,12)^  =^EQ_OP(154,16)^  bar^IDENT(154,18)^ 
    in^KWD(155,4)^   (^LPARAN(155,9)^  print^IDENT(155,11)^ (^LPARAN(155,16)^ i^IDENT(155,17)^ )^rparan^ )^RPARAN(155,18)^  ;^SEMICOLON(155,20)^  use^IDENT(155,22)^ (^LPARAN(155,25)^ i^IDENT(155,26)^ )^rparan^ )^RPARAN(155,27)^  )^rparan^ )^RPARAN(155,29)^ 
    end^KWD(156,4)^   ;^SEMICOLON(156,10)^ 

  
  let^KWD(159,2)^  type^KWD(159,6)^  foo^IDENT(159,12)^  =^EQ_OP(159,16)^  bara^IDENT(159,18)^ 
      type^KWD(160,6)^  i^IDENT(160,12)^  =^EQ_OP(160,14)^  foo^IDENT(160,16)^ 
    in^KWD(161,4)^   (^LPARAN(161,9)^  print^IDENT(161,11)^ (^LPARAN(161,16)^ i^IDENT(161,17)^ )^rparan^ )^RPARAN(161,18)^  ;^SEMICOLON(161,20)^  use^IDENT(161,22)^ (^LPARAN(161,25)^ i^IDENT(161,26)^ )^rparan^ )^RPARAN(161,27)^  )^rparan^ )^RPARAN(161,29)^ 
    end^KWD(162,4)^   ;^SEMICOLON(162,10)^   

  let^KWD(164,2)^   
   var^KWD(165,3)^  am^IDENT(165,8)^  :=^ASN_OP(165,11)^  1^PURE_NUM(165,14)^  +^ADD_OP(165,16)^  f^IDENT(165,18)^ (^LPARAN(165,19)^ a^IDENT(165,20)^ ,^COMMA(165,21)^ b^IDENT(165,22)^ )^rparan^ )^RPARAN(165,23)^  +^ADD_OP(165,25)^  r^IDENT(165,27)^ .^PERIOD(165,28)^ e^IDENT(165,29)^  +^ADD_OP(165,31)^  a^IDENT(165,33)^ [^sqLbrace(165,34)^ r^IDENT(165,35)^ .^PERIOD(165,36)^ e^IDENT(165,37)^ ]^sqRbrace(165,38)^   var^KWD(165,40)^  bm^IDENT(165,45)^  :=^ASN_OP(165,48)^  2^PURE_NUM(165,51)^   
  in^KWD(166,2)^  (^LPARAN(166,6)^ 
   try^IDENT(167,4)^ (^LPARAN(167,7)^  )^rparan^ )^RPARAN(167,9)^  )^rparan^ )^RPARAN(167,11)^   
  end^KWD(168,2)^    

)^rparan^ )^RPARAN(170,1)^ 

var^KWD(172,1)^  am^IDENT(172,5)^  :=^ASN_OP(172,8)^  1^PURE_NUM(172,11)^  +^ADD_OP(172,13)^  f^IDENT(172,15)^ (^LPARAN(172,16)^ a^IDENT(172,17)^ ,^COMMA(172,18)^ b^IDENT(172,19)^ )^rparan^ )^RPARAN(172,20)^  +^ADD_OP(172,22)^  r^IDENT(172,24)^ .^PERIOD(172,25)^ e^IDENT(172,26)^  +^ADD_OP(172,28)^  a^IDENT(172,30)^ [^sqLbrace(172,31)^ r^IDENT(172,32)^ .^PERIOD(172,33)^ e^IDENT(172,34)^ ]^sqRbrace(172,35)^ 
var^KWD(173,1)^  bm^IDENT(173,5)^  :=^ASN_OP(173,8)^  2^PURE_NUM(173,11)^  +^ADD_OP(173,13)^  f^IDENT(173,15)^ (^LPARAN(173,16)^ a^IDENT(173,17)^ ,^COMMA(173,18)^  b^IDENT(173,20)^ ,^COMMA(173,21)^  f^IDENT(173,23)^ (^LPARAN(173,24)^ a^IDENT(173,25)^ ,^COMMA(173,26)^  b^IDENT(173,28)^ ,^COMMA(173,29)^  c^IDENT(173,31)^ ,^COMMA(173,32)^  d^IDENT(173,34)^ ,^COMMA(173,35)^  e^IDENT(173,37)^ )^rparan^ )^RPARAN(173,38)^ ,^COMMA(173,39)^  r^IDENT(173,41)^ .^PERIOD(173,42)^ e1^IDENT(173,43)^ .^PERIOD(173,45)^ e2^IDENT(173,46)^ ,^COMMA(173,48)^  ar1^IDENT(173,50)^ [^sqLbrace(173,53)^ e1^IDENT(173,54)^ ]^sqRbrace(173,56)^ .^PERIOD(173,57)^ e2^IDENT(173,58)^  )^rparan^ )^RPARAN(173,61)^  
var^KWD(174,1)^  cm^IDENT(174,5)^  :^COLON(174,8)^  int^KWD(174,9)^  :=^ASN_OP(174,14)^  get_tree^IDENT(174,17)^ (^LPARAN(174,25)^  f^IDENT(174,27)^ (^LPARAN(174,28)^ g^IDENT(174,29)^ (^LPARAN(174,30)^ h^IDENT(174,31)^ (^LPARAN(174,32)^ a^IDENT(174,33)^ )^rparan^ )^RPARAN(174,34)^ )^rparan^ )^RPARAN(174,35)^ )^rparan^ )^RPARAN(174,36)^ )^rparan^ )^RPARAN(174,37)^  
var^KWD(175,1)^  dm^IDENT(175,5)^  :^COLON(175,8)^  treeLeaves^IDENT(175,10)^  :=^ASN_OP(175,21)^  4^PURE_NUM(175,24)^ 
var^KWD(176,1)^  em^IDENT(176,5)^  :^COLON(176,8)^  string^KWD(176,9)^  :=^ASN_OP(176,17)^  100^PURE_NUM(176,20)^  +^ADD_OP(176,24)^  4^PURE_NUM(176,26)^  +^ADD_OP(176,28)^  349^PURE_NUM(176,30)^  +^ADD_OP(176,34)^  2^PURE_NUM(176,36)^  
var^KWD(177,1)^  fm^IDENT(177,5)^  :=^ASN_OP(177,8)^  100^PURE_NUM(177,11)^  +^ADD_OP(177,15)^  (^LPARAN(177,17)^  41^PURE_NUM(177,19)^  +^ADD_OP(177,22)^  3490^PURE_NUM(177,24)^  +^ADD_OP(177,29)^  21^PURE_NUM(177,31)^  )^rparan^ )^RPARAN(177,34)^  -^MINUS_OP(177,36)^  (^LPARAN(177,38)^  tiglork^IDENT(177,40)^  -^MINUS_OP(177,48)^  45^PURE_NUM(177,50)^  )^rparan^ )^RPARAN(177,53)^  +^ADD_OP(177,55)^  (^LPARAN(177,57)^ 98^PURE_NUM(177,58)^ )^rparan^ )^RPARAN(177,60)^  
var^KWD(178,1)^  fm1^IDENT(178,5)^  :=^ASN_OP(178,9)^  100^PURE_NUM(178,12)^  +^ADD_OP(178,16)^  (^LPARAN(178,18)^  4^PURE_NUM(178,20)^  +^ADD_OP(178,22)^  349^PURE_NUM(178,24)^  *^MULT_OP(178,28)^  rec^IDENT(178,30)^ .^PERIOD(178,33)^ ident^IDENT(178,34)^  )^rparan^ )^RPARAN(178,40)^  -^MINUS_OP(178,42)^  (^LPARAN(178,44)^  tiglork^IDENT(178,46)^  /^DIV_OP(178,54)^  45^PURE_NUM(178,56)^  )^rparan^ )^RPARAN(178,59)^  /^DIV_OP(178,61)^  (^LPARAN(178,63)^ 98^PURE_NUM(178,64)^ )^rparan^ )^RPARAN(178,66)^  &^AND_OP(178,68)^  arry^IDENT(178,70)^ [^sqLbrace(178,74)^ element^IDENT(178,75)^ ]^sqRbrace(178,82)^ 
var^KWD(179,1)^  fm2^IDENT(179,5)^  :=^ASN_OP(179,9)^  100^PURE_NUM(179,12)^  +^ADD_OP(179,16)^  -^MINUS_OP(179,18)^ (^LPARAN(179,19)^  4^PURE_NUM(179,21)^  >=^GR_EQ_OP(179,23)^  349^PURE_NUM(179,26)^  *^MULT_OP(179,30)^  (^LPARAN(179,32)^ factor^IDENT(179,33)^  |^OR_OP(179,40)^  nofactor^IDENT(179,42)^ )^rparan^ )^RPARAN(179,50)^  )^rparan^ )^RPARAN(179,52)^  -^MINUS_OP(179,54)^  (^LPARAN(179,56)^  (^LPARAN(179,58)^ tiglora^IDENT(179,59)^  &^AND_OP(179,67)^  k^IDENT(179,69)^ )^rparan^ )^RPARAN(179,70)^  /^DIV_OP(179,72)^  -^MINUS_OP(179,74)^ 45^PURE_NUM(179,75)^  )^rparan^ )^RPARAN(179,78)^  /^DIV_OP(179,80)^  (^LPARAN(179,82)^ 98^PURE_NUM(179,83)^  =^EQ_OP(179,86)^  temperature^IDENT(179,88)^ )^rparan^ )^RPARAN(179,99)^  


type^KWD(182,1)^  gagola^IDENT(182,6)^  =^EQ_OP(182,13)^  cherubee^IDENT(182,15)^ 

var^KWD(184,1)^  gaga^IDENT(184,5)^  :=^ASN_OP(184,10)^  4^PURE_NUM(184,13)^  

type^KWD(186,1)^  nagui^IDENT(186,6)^  =^EQ_OP(186,12)^  shacha^IDENT(186,14)^ 

type^KWD(188,1)^  argulza^IDENT(188,6)^  =^EQ_OP(188,14)^  amerlxio^IDENT(188,16)^ 
var^KWD(189,1)^  xstrazzi^IDENT(189,5)^  :^COLON(189,14)^  argulza^IDENT(189,16)^  :=^ASN_OP(189,24)^  19245^PURE_NUM(189,27)^ 


type^KWD(192,1)^  orpheillo^IDENT(192,6)^  =^EQ_OP(192,16)^  nazarienna^IDENT(192,18)^ 

type^KWD(194,1)^  rr^IDENT(194,6)^  =^EQ_OP(194,9)^  array^KWD(194,10)^  of^KWD(194,16)^  stars^IDENT(194,20)^ 
type^KWD(195,1)^  yy^IDENT(195,6)^  =^EQ_OP(195,9)^  {^LBRACE(195,11)^  gg^IDENT(195,13)^ :^COLON(195,15)^  rodents^IDENT(195,17)^ ,^COMMA(195,24)^  yy^IDENT(195,26)^ :^COLON(195,28)^  cats^IDENT(195,30)^  }^RBRACE(195,35)^ 
type^KWD(196,1)^  zz^IDENT(196,6)^  =^EQ_OP(196,9)^  {^LBRACE(196,11)^  dd^IDENT(196,13)^ :^COLON(196,15)^  only_dogs^IDENT(196,17)^  }^RBRACE(196,27)^  

in^KWD(198,1)^  (^LPARAN(198,4)^  
     treeLeaves^IDENT(199,6)^ (^LPARAN(199,16)^ 0^PURE_NUM(199,17)^ )^rparan^ )^RPARAN(199,18)^ ;^SEMICOLON(199,19)^ 

     
if^KWD(202,1)^  (^LPARAN(202,4)^  mix^IDENT(202,6)^  =^EQ_OP(202,10)^  trytmp^IDENT(202,12)^  )^rparan^ )^RPARAN(202,19)^  then^KWD(202,20)^   
(^LPARAN(203,1)^ 
   action_one^IDENT(204,4)^ (^LPARAN(204,14)^ )^rparan^ )^RPARAN(204,15)^ ;^SEMICOLON(204,16)^ 
   action_two^IDENT(205,4)^ (^LPARAN(205,14)^ )^rparan^ )^RPARAN(205,15)^ 
)^rparan^ )^RPARAN(206,1)^ 

   )^rparan^ )^RPARAN(208,4)^ 

end^KWD(210,1)^  

	
